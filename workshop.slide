Workshop Go, GraphQL and gRPC
Devfest Cerrado 2019

Guilherme Rezende
Globo.com
@gbrezende

Marcelo Mendonça
Mudano
@mtmendonca

* Agenda

- Architecture
- Front End
- Go
- GraphQL Gateway
- gRPC
- Deploy

* Presentation
.html img/style.html

This presentation and the code we are going to use is available at:

[[https://github.com/guilhermebr/workshop-go-graphql-grpc]]
[[https://go-talks.appspot.com/github.com/guilhermebr/workshop-go-graphql-grpc/workshop.slide]]

* Architecture

.image img/arch.jpg 500 500

* Front End
 $ git clone https://github.com/mtmendonca/teamder-web
- Typescript
- React with hooks
- Apollo Client
- Material-ui

* GraphQL
- GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.
- Ask for what you need, get exactly that
.image img/gql.png 450 450

* Front End
.image img/frontend.png 600 678


* Go

* Why Go?

.image img/gopher.jpg

* Why Go?

.play why.go

* Go: the language of the cloud.

- Small footprint runtime
- Modern and efficient networking
- Open source

* Who uses Go?

- Kubernetes
- Docker
- Uber
- Dropbox
- Twitter
- Google
- Globo.com

* Microservices benefits

- Easier to scale
- Clear ownership
- Easier to maintain and evolve
- New releases take minutes
- Increased agility
- Faster innovation

* Microservice performance gotchas

- Slow data serialization
- Network contention

* Microservices with Go

"[...] if you're building a server, I can't Imagine
using anything other than Go"
- Ryan Dahl

- *Ryan* *Dahl* is a software engineer and *original* *developer* of *Node.js* *javascript* *runtime*

.image img/gopher_glasses.png

* Installing Go

[[https://golang.org/doc/install]]

* Hands On

 $ git clone git@github.com:mtmendonca/teamder-api
 $ git checkout -f v1

* GraphQL Gateway

* Installing GraphQL lib

* Hands On

 $ git checkout -f v2

* gRPC

* History

.image img/grpc.png

- gRPC is the next generation of Stubby
- Google has been running a microservices architecture internally for over a decade.
- Google’s internal stack relies heavily on utilising RPCs (or Remote Procedure Calls). Every application is built using many RPC services that provide different tiers of functionality.
- gRPC is the open sourcing and continued development of Stubby.

* Protocol Buffers

- another open source project by Google
- language-neutral, platform-neutral, extensible mechanism for quickly serializing structured data in a small binary packet.
- By default, gRPC used Protocol Buffers v3 for data serialisation.

* Protocol Buffers

IDL (Interface definition language)
- Describe once and generate interfaces for any language.

Data Model
- Structure of the request and response.

Wire Format
- Binary format for network transmission.

* Proto Buffer Language

 syntax = “proto3”;

 message Person {
     string name = 1;
     int32 id = 2;
     string email = 3;

     enum PhoneType {
       MOBILE = 0;
       HOME = 1;
       WORK = 2;
     }

     message PhoneNumber {
       string number = 1;
       PhoneType type = 2;
     }

     repeated PhoneNumber phone = 4;
 }

* Service Definition

define RPCs

 service RouteGuide {
   rpc GetFeature(Point) returns (Feature);
   rpc RouteChat(stream RouteNote) returns (stream RouteNote);
 }

* HTTP/2

- Multiplexing
- Bidirectional Streaming
- HTTPS

* Setup

    $ go get -u google.golang.org/grpc
    $ go get -u github.com/golang/protobuf/proto
    $ go get -u github.com/golang/protobuf/protoc-gen-go


* Hands On

 $ git checkout -f v3

* Deploy with Kubernetes

* Convinced of Go?

* Gopher

.image img/gopher_rm.png 400 600
.caption _Gopher_ by [[@ashleymcnamara][Ashley McNamara]]

* Gopher

.image img/gopher-gotham.png
.caption _Gopher_ by [[@ashleymcnamara][Ashley McNamara]]

